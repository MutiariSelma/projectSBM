# -*- coding: utf-8 -*-
"""Klasifikasi Level Stress.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DlozS9sd_WZ2t6WL8r1XV_886j2i-n0C
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
df = pd.read_csv('MentalHealthSurvey.csv')
df.head()

sports_map = {
    'No Sports': 0,
    '1-3 times': 1,
    '4-6 times': 2,
    '7+ times': 3
}
sleep_map = {
    '2-4 hrs': 0,
    '4-6 hrs': 1,
    '7-8 hrs': 2
}
df['sports'] = df['sports_engagement'].map(sports_map)
df['avg_sleep'] = df['average_sleep'].map(sleep_map)

df[['sports_engagement', 'sports', 'average_sleep', 'avg_sleep']].head(10)

df['stress_score'] = df['sports'] + df['avg_sleep'] + df['academic_pressure'] + df['depression']+ df['anxiety']+ df['future_insecurity']+ df['social_relationships']
def categorize_stress(score):
    if score <= 9:
        return 'Normal'
    elif score <= 14:
        return 'Mild'
    elif score <= 19:
        return 'Moderate'
    elif score <= 24:
        return 'Severe'
    else:
        return 'Extremely Severe'

df['stress_level'] = df['stress_score'].apply(categorize_stress)

#menyiapkan fitur dan label
features = ['sports', 'avg_sleep', 'academic_pressure', 'depression', 'anxiety', 'future_insecurity', 'social_relationships']
X = df[features].dropna()
y = df['stress_level'].loc[X.index]

df['stress_level'].value_counts()

df['stress_level'] = df['stress_level'].replace({'Normal': 'Mild'})
df['stress_level'] = df['stress_level'].replace('Extremely Severe', 'Severe')

print(df['stress_level'].value_counts())

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import cross_val_score
from sklearn.neighbors import KNeighborsClassifier
import pandas as pd

features = ['sports', 'avg_sleep', 'academic_pressure', 'depression', 'anxiety', 'future_insecurity', 'social_relationships']
X = df[features]
y = df['stress_level']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report, confusion_matrix

model = KNeighborsClassifier(n_neighbors=7)

scores = cross_val_score(model, X_scaled, y, cv=5)
print("Hasil akurasi cross-validation:", scores.mean())

from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, stratify=y)

model.fit(X_train, y_train)
y_pred = model.predict(X_test)

print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

from sklearn.ensemble import RandomForestClassifier

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)

from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import accuracy_score
import numpy as np

skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)
rf_accuracies = []

for i, (train_idx, test_idx) in enumerate(skf.split(X_scaled, y), start=1):
    X_train, X_test = X_scaled[train_idx], X_scaled[test_idx]
    y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]

    rf_model.fit(X_train, y_train)
    y_pred = rf_model.predict(X_test)

    acc = accuracy_score(y_test, y_pred)
    rf_accuracies.append(acc)
    print(f"Akurasi Random Forest Fold {i}: {acc:.2f}")

print(f"\nRata-rata Akurasi Random Forest: {np.mean(rf_accuracies):.4f}")

from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, stratify=y, random_state=42)

rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

print(confusion_matrix(y_test, y_pred_rf))
print(classification_report(y_test, y_pred_rf))